[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arr-score-exporter"
version = "2.0.0"
description = "Advanced TRaSH Guides custom format score analysis and optimization tool for Radarr and Sonarr"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Gary Adkins", email = "g.adkins@gmail.com"}
]
keywords = ["radarr", "sonarr", "automation", "media", "plex"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia",
    "Topic :: System :: Archiving",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.32.0",
    "pyyaml>=6.0",
    "urllib3>=2.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.12",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
]

[project.urls]
Homepage = "https://github.com/gdadkins/arr-score-exporter"
Documentation = "https://github.com/gdadkins/arr-score-exporter#readme"
Repository = "https://github.com/gdadkins/arr-score-exporter.git"
Issues = "https://github.com/gdadkins/arr-score-exporter/issues"

[project.scripts]
arr-export = "arr_score_exporter.cli:main"
arr-export-enhanced = "arr_score_exporter.enhanced_cli:cli"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
arr_exporter = ["*.yaml", "*.yml"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--strict-markers --strict-config --cov=arr_exporter --cov-report=term-missing"

[tool.coverage.run]
source = ["src/arr_exporter"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]